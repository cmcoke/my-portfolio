/*
This file is used to contain all vendor imports.
*/
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
@import url("https://fonts.googleapis.com/css?family=Nunito+Sans:400,600,700");
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
figcaption,
figure {
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * Add the correct display in IE.
 */
main {
  display: block; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre, code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * Known issues:
 * - `select`:
 *   By default, Chrome on OS X and Safari on OS X allow very limited styling of
 *   select, unless a border property is set. The default font weight on
 *   optgroup elements cannot safely be changed in Chrome on OSX and Safari on
 *   OS X.
 * - `[type="checkbox"]`:
 *   It is recommended that you do not style checkbox and radio inputs as
 *   Firefox's implementation does not respect box-sizing, padding, or width.
 * - `[type="number"]`:
 *   Certain font size values applied to number inputs cause the cursor style of
 *   the decrement button to change from `default` to `text`.
 * - `[type="search"]`:
 *   The search input is not fully stylable by default. In Chrome and Safari on
 *   OSX/iOS you can't control `font`, `padding`, `border`, or `background`. In
 *   Chrome and Safari on Windows you can't control `border` properly. It will
 *   apply `border-width` but will only show a border color (which cannot be
 *   controlled) for the outer 1px of that border. Applying
 *   `-webkit-appearance: textfield` addresses these issues without removing the
 *   benefits of search inputs (e.g. showing past searches). Safari (but not
 *   Chrome) will clip the cancel button on when it has padding (and `textfield`
 *   appearance).
 * - `::placeholder`:
 *   In Edge, placeholders will disappear on `relative` or `absolute` positioned
 *   `<input>` elements if you use `opacity` less than `1` due to a
 *   [bug](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/3901363/).
 */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  line-height: 1.15;
  /* 1 */
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 */
button {
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
   * Remove the inner border and padding in Firefox.
   */
  /**
   * Restore the focus styles unset by the previous rule.
   */ }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }

/**
 * Show the overflow in Edge.
 */
input {
  overflow: visible; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
   * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
   */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/*
 * Add the correct display in IE 9-.
 */
menu {
  display: block; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none; }

/*8.0.0*/
/*
This file is used to contain all abstracts imports.
Files inside this folder can contain abstract settings, helpers or functions. They have no direct output.
*/
/*
This file is used to contain all base imports.
Files inside this folder can contain global styles used in the project.
*/
*, *::after, *::before {
  box-sizing: border-box; }

/* make sticky footer  -- start */
html, body {
  height: 100%; }

body {
  display: flex;
  flex-direction: column; }

.content {
  flex: 1 0 auto; }

.footer {
  flex-shrink: 0; }

/* make sticky footer  -- end */
img {
  max-width: 100%;
  height: auto; }

a {
  text-decoration: none; }

ul {
  list-style: none; }

body {
  font-family: "Nunito Sans", sans-serif; }

/*
This file is used to contain all component imports.
Files inside this folder should contain all styles relating to a reusable component.
*/
.btn {
  color: #ffffff;
  transition: 0.3s ease-in-out; }
  .btn--resume {
    background-color: #007fff;
    padding: 0.6875rem 0.625rem; }
  .btn--view-more {
    background-color: black;
    padding: 0.625rem 1.875rem; }
  .btn:hover {
    background-color: #0874E1; }
  .btn--contact {
    background-color: black;
    padding: 0.625rem 1.875rem;
    border: none;
    margin: 11px 0px 50px 0px; }

.container {
  max-width: 315px;
  margin: 0 auto;
  padding: 0 11px; }
  @media screen and (min-width: 400px) {
    .container {
      max-width: 1100px;
      padding: 0 18px; } }

.heading--intro {
  font-size: calc(1.3125rem + 2.125 * ((100vw - 26.25rem) / 53.75));
  font-weight: 700;
  text-transform: uppercase;
  width: 283px;
  margin-bottom: 5px;
  margin-top: 0; }

@media screen and (min-width: 1280px){
  .heading--intro{
    font-size: 3.4375rem; } }

@media screen and (max-width: 420px){
  .heading--intro{
    font-size: 1.3125rem; } }
  @media screen and (min-width: 400px) {
    .heading--intro {
      width: 100%; } }

.heading--title {
  color: #0874E1; }

.heading__company, .heading__email-type {
  text-transform: uppercase; }

.heading__company {
  color: #ffffff;
  margin-bottom: 0; }

.heading__email-type {
  color: #007fff;
  font-weight: 700;
  margin-top: 5px; }

.heading--about {
  font-size: 1.125rem;
  font-weight: 700;
  text-transform: uppercase;
  margin-top: -5px;
  line-height: 25px; }

.heading--contact {
  font-size: 1.125rem;
  font-weight: 700;
  text-transform: uppercase;
  margin-top: 40px; }
  @media screen and (min-width: 768px) {
    .heading--contact {
      font-size: 1.875rem;
      margin-bottom: 0px; } }

/*
This file is used to contain all component imports.
Files inside this folder can contain specific element styles and layout.
*/
@media screen and (min-width: 800px) {
  .header {
    position: fixed;
    top: 0;
    background-color: white;
    border-bottom: 1px solid #ededed;
    width: 100%;
    z-index: 1;
    height: 85px; } }

.header__mobile-menu-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-top: 20px; }
  @media screen and (min-width: 800px) {
    .header__mobile-menu-container {
      display: none; } }

.header__menu-icon {
  width: 20px;
  height: 19px;
  position: fixed;
  top: 35px;
  right: 23px;
  z-index: 11; }
  .header__menu-icon::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 30px;
    height: 3px;
    background-color: #007fff;
    -webkit-transform-origin: 0 0;
            transform-origin: 0 0;
    transition: -webkit-transform .3s ease-out;
    transition: transform .3s ease-out;
    transition: transform .3s ease-out, -webkit-transform .3s ease-out; }
  .header__menu-icon__middle {
    position: absolute;
    top: 8px;
    left: 0;
    width: 30px;
    height: 3px;
    background-color: #007fff;
    transition: all .3s ease-out;
    -webkit-transform-origin: 0 50%;
            transform-origin: 0 50%; }
  .header__menu-icon::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 30px;
    height: 3px;
    background-color: #007fff;
    -webkit-transform-origin: 0 100%;
            transform-origin: 0 100%;
    transition: -webkit-transform .3s ease-out;
    transition: transform .3s ease-out;
    transition: transform .3s ease-out, -webkit-transform .3s ease-out; }
  @media screen and (min-width: 800px) {
    .header__menu-icon {
      display: none; } }

.header__menu-icon--close-x::before {
  -webkit-transform: rotate(45deg) translateY(-3px);
          transform: rotate(45deg) translateY(-3px); }

.header__menu-icon--close-x .header__menu-icon__middle {
  opacity: 0;
  -webkit-transform: scaleX(0);
          transform: scaleX(0); }

.header__menu-icon--close-x::after {
  -webkit-transform: rotate(-45deg) translateY(3px);
          transform: rotate(-45deg) translateY(3px); }

.navigation {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 30%;
  z-index: 10;
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
  transition: -webkit-transform ease-out 250ms;
  transition: transform ease-out 250ms;
  transition: transform ease-out 250ms, -webkit-transform ease-out 250ms; }
  @media screen and (min-width: 800px) {
    .navigation {
      position: static;
      -webkit-transform: none;
              transform: none; } }
  .navigation-is-open nav {
    -webkit-transform: translateX(0);
            transform: translateX(0); }
    @media screen and (min-width: 800px) {
      .navigation-is-open nav {
        -webkit-transform: none;
                transform: none; } }
  .navigation__hideOnMobile {
    display: none; }
    @media screen and (min-width: 800px) {
      .navigation__hideOnMobile {
        display: inline; } }
  .navigation ul {
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    height: 100vh;
    justify-content: space-around;
    align-items: stretch;
    background: white;
    border: 1px solid #ededed; }
    @media screen and (min-width: 800px) {
      .navigation ul {
        justify-content: space-between;
        align-items: center;
        flex-direction: row;
        background: none;
        border: none;
        height: auto;
        padding-top: 15px; } }
  .navigation li {
    border-bottom: 1px solid #ededed;
    text-align: center; }
    @media screen and (min-width: 800px) {
      .navigation li {
        border-bottom: none;
        text-align: left; } }
  .navigation a {
    display: inline-block;
    color: #007fff;
    font-size: 0.9375rem;
    line-height: 0;
    padding: calc(100vh/8) 0;
    letter-spacing: 5px;
    text-transform: uppercase;
    width: 100%; }
    @media screen and (min-width: 800px) {
      .navigation a {
        display: inline;
        color: #979797;
        font-size: 0.75rem;
        font-weight: 600;
        letter-spacing: 3px;
        width: 62px;
        height: 16px;
        text-transform: uppercase;
        padding: 0;
        transition: .3s ease-out; }
        .navigation a:hover {
          color: #007fff; } }

.intro {
  padding: 55px 0px 50px 0px; }
  @media screen and (min-width: 800px) {
    .intro {
      padding: 160px 0px 150px 0px; } }
  .intro__description {
    color: #979797;
    line-height: 25px;
    font-size: calc(1rem + 0.375 * ((100vw - 26.25rem) / 53.75)); }
  @media screen and (min-width: 1280px){
  .intro__description{
    font-size: 1.375rem; } }
  @media screen and (max-width: 420px){
  .intro__description{
    font-size: 1rem; } }

.projects {
  position: relative; }
  .projects__heading {
    color: #979797;
    text-align: center;
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 3px;
    text-transform: uppercase;
    padding-bottom: 11px; }
    @media screen and (min-width: 400px) {
      .projects__heading {
        text-align: left;
        margin-bottom: 20px; } }
    @media screen and (min-width: 1180px) {
      .projects__heading {
        position: absolute;
        top: 20px;
        left: -80px;
        -webkit-transform: rotate(-90deg);
                transform: rotate(-90deg); } }
  .projects img {
    display: block;
    margin-left: auto;
    margin-right: auto; }
  .projects__item {
    position: relative;
    overflow: hidden;
    margin-bottom: 25px; }
  .projects__overlay {
    opacity: 0;
    background: rgba(0, 0, 0, 0.6);
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    transition: all 0.4s ease-in-out 0s; }
  .projects__item:hover .projects__overlay {
    opacity: 1; }
  .projects__content {
    position: absolute;
    top: 50%;
    left: 50%;
    text-align: center;
    display: inline-block;
    -webkit-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%); }
  .projects__link {
    position: absolute;
    bottom: 0;
    right: 0;
    display: block;
    width: 65px;
    height: 0;
    border-bottom: 90px solid #007fff;
    border-left: 90px solid transparent;
    z-index: 1; }
  .projects__email:after {
    position: absolute;
    top: 60px;
    left: -55px;
    content: url("/assets/img/link.png"); }
  .projects__github:after {
    position: absolute;
    top: 60px;
    left: -25px;
    content: url("/assets/img/github.png"); }
  @media screen and (min-width: 600px) {
    .projects__container {
      display: flex; }
    .projects__column-1 {
      margin-right: 22px; } }
  .projects__btn {
    text-align: center;
    margin-top: 40px;
    margin-bottom: 60px; }

.about {
  padding: 0px 3px 0px 3px;
  position: relative; }
  @media screen and (min-width: 768px) {
    .about {
      padding: 0.6875rem 0; } }
  .about__heading {
    color: #979797;
    text-align: center;
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 3px;
    text-transform: uppercase;
    padding-bottom: 11px; }
    @media screen and (min-width: 400px) {
      .about__heading {
        text-align: left;
        margin-bottom: 20px; } }
    @media screen and (min-width: 1180px) {
      .about__heading {
        position: absolute;
        top: 25px;
        left: -80px;
        margin-bottom: 0;
        -webkit-transform: rotate(-90deg);
                transform: rotate(-90deg); } }
  .about__bio {
    font-size: 1rem;
    font-weight: 600;
    line-height: 30px;
    margin-bottom: 30px; }
    @media screen and (min-width: 700px) {
      .about__bio {
        margin-bottom: 60px; } }
  .about__skills {
    display: flex;
    flex-direction: column; }
    @media screen and (min-width: 700px) {
      .about__skills {
        flex-direction: row;
        justify-content: space-between;
        padding: 0px 5px; } }
  .about__technologies {
    font-weight: 700;
    text-transform: uppercase;
    text-align: center; }
  .about ul {
    margin: -2px 0 0 0;
    padding: 0;
    text-align: center; }
  .about li {
    margin-bottom: 15px; }

.contact {
  border-top: 1px solid #F6F4F4;
  background-color: white;
  padding: 0px 5px 0px 5px; }
  @media screen and (min-width: 768px) {
    .contact {
      padding: 0.6875rem 0.625rem; } }
  .contact__text-content {
    font-size: 1rem;
    font-weight: 600;
    line-height: 30px;
    margin-top: -10px; }
    @media screen and (min-width: 768px) {
      .contact__text-content {
        margin-top: 5px; } }
  .contact__form {
    position: relative;
    padding: 18px 0px;
    margin-top: 10px; }
  .contact__field {
    font-family: inherit;
    width: 100%;
    border: 0;
    border-bottom: 1px solid #979797;
    outline: 0;
    font-size: 1rem;
    padding: 7px 0;
    background: transparent;
    transition: border-color 0.2s; }
  .contact__textarea {
    font-family: inherit;
    width: 100%;
    border: 0;
    border-bottom: 1px solid #979797;
    outline: 0;
    font-size: 1rem;
    padding: 7px 0;
    resize: none;
    background: transparent;
    transition: border-color 0.2s; }
    @media screen and (min-width: 1052px) {
      .contact__textarea {
        width: 743px; } }
  .contact__field::-webkit-input-placeholder, .contact__textarea::-webkit-input-placeholder {
    color: transparent; }
  .contact__field:-ms-input-placeholder, .contact__textarea:-ms-input-placeholder {
    color: transparent; }
  .contact__field::-ms-input-placeholder, .contact__textarea::-ms-input-placeholder {
    color: transparent; }
  .contact__field::placeholder, .contact__textarea::placeholder {
    color: transparent; }
  .contact__field:placeholder-shown ~ .contact__label,
  .contact__textarea:placeholder-shown ~ .contact__label {
    font-size: 1rem;
    cursor: text;
    top: 20px; }
  .contact__field:focus ~ .contact__label,
  .contact__textarea:focus ~ .contact__label,
  .contact label {
    position: absolute;
    top: 0;
    display: block;
    transition: 0.2s;
    font-size: 0.75rem;
    color: #979797; }
  .contact__field:focus ~ .contact__label,
  .contact__textarea:focus ~ .contact__label {
    color: black; }
  .contact__field:focus, .contact__textarea:focus {
    padding-bottom: 6px;
    border-bottom: 1px solid #007fff; }
  .contact [type='submit'] {
    font-family: "Nunito Sans", sans-serif; }
  @media screen and (min-width: 1052px) {
    .contact__wrapper {
      display: flex;
      justify-content: space-between; }
    .contact__text-content {
      width: 230px; } }

.footer {
  background-color: white; }
  .footer__name {
    font-size: 0.625rem;
    font-weight: 600;
    text-align: center;
    text-transform: uppercase; }
    .footer__name a {
      color: #007fff; }
  .footer__social-media {
    text-align: center; }
    .footer__social-media a {
      margin-left: 5px; }
  @media screen and (min-width: 600px) {
    .footer__content {
      display: flex;
      justify-content: space-between; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
